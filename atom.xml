<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Charandas Batra-Daitch]]></title>
  <subtitle><![CDATA[Web Developer-Evangelist]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://infinitecaus.es/"/>
  <updated>2015-09-04T22:31:24.023Z</updated>
  <id>http://infinitecaus.es/</id>
  
  <author>
    <name><![CDATA[Charandas Batra-Daitch]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Using keen-js with jspm - use superagent 1.3]]></title>
    <link href="http://infinitecaus.es/2015/09/02/using-keen-js-with-jspm/"/>
    <id>http://infinitecaus.es/2015/09/02/using-keen-js-with-jspm/</id>
    <published>2015-09-02T20:32:00.000Z</published>
    <updated>2015-09-04T22:31:24.023Z</updated>
    <content type="html"><![CDATA[<p><code>superagent</code> must have streamlined their browser lib in the recent versions. My test with 1.3.0 went well. However with <code>keen-js</code> <a id="more"></a> <a href="https://github.com/keen/keen-js/blob/master/package.json" target="_blank" rel="external">depending</a> on <code>^0.21.0</code> as of version <code>3.2.7</code>, you will get this CORS error (different from the IE CORS issue outlined <a href="https://github.com/keen/keen-js/issues/237" target="_blank" rel="external">here</a>) on client API calls like so:<br><script src="//gist.github.com/charandas/f148c9cca1ec9412e8b7.js"></script></p>
<p>A temporary way to fix it until <code>keen-js</code> moves on is to:</p>
<ol>
<li>Ensure you are using <code>npm:keen-js</code> and not <code>github:keen/keen-js</code>.</li>
<li>Now install superagent 1.3.0. <code>jspm install npm:superagent@1.3.0</code></li>
<li>You will have two forks of superagent now. Do <code>jspm resolve --only npm:superagent@1.3.0</code></li>
</ol>
<p>Voila! You are done. You will no longer get the error, and <code>client</code> API calls just work.</p>
]]></content>
    <summary type="html">
    <![CDATA[jspm resolve comes to rescue]]>
    
    </summary>
    
      <category term="jspm" scheme="http://infinitecaus.es/tags/jspm/"/>
    
      <category term="keen-js" scheme="http://infinitecaus.es/tags/keen-js/"/>
    
      <category term="superagent" scheme="http://infinitecaus.es/tags/superagent/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Subnet Sum with Fixed Constituent Size]]></title>
    <link href="http://infinitecaus.es/2015/06/24/subnet-sum-with-fixed-constituent-size/"/>
    <id>http://infinitecaus.es/2015/06/24/subnet-sum-with-fixed-constituent-size/</id>
    <published>2015-06-24T19:40:00.000Z</published>
    <updated>2015-09-05T01:39:24.040Z</updated>
    <content type="html"><![CDATA[<p>On recently applying for a UX position at <a href="https://www.elastic.co/" target="_blank" rel="external">Elastic</a> for their product <a href="https://www.elastic.co/products/kibana" target="_blank" rel="external">Kibana</a>, I was given this complex yet intriguing challenge: <a id="more"></a></p>
<blockquote>
<p>In javascript: Write a function that, given an array of<br>integers (x), and an integer (y), returns true if any two of<br>the integers in x add up to y. (Optional) Now, write a<br>function that, given the above arguments and an additional<br>integer (z), returns true if any z of the integers in x add<br>up to y.</p>
</blockquote>
<p>While not the most optimal solution, my solution based<br>off of this Quora <a href="http://www.quora.com/I-need-to-write-an-algorithm-How-should-I-approach-the-following-problem/answer/Ivan-Krpelnik" target="_blank" rel="external">answer</a> works:</p>
<script src="//gist.github.com/charandas/5fb5189ce1239c807afd.js"></script>
<p>Another possible solution could be to not brute force the iteration between the start and stop positions, and instead compute all the permutations of the bitmasks that have <code>z</code> <code>1&#39;s</code>. That one could take some more work, using this <a href="http://jsbin.com/eXefawe/2/edit?html,js,output" target="_blank" rel="external">jsbin</a>.</p>
<p>I was trying to keep it simple. But if you come across other solutions, feel free to share.</p>
]]></content>
    <summary type="html">
    <![CDATA[One way to tackle this NP-complete problem.]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://infinitecaus.es/tags/JavaScript/"/>
    
      <category term="Subnet Sum" scheme="http://infinitecaus.es/tags/Subnet-Sum/"/>
    
      <category term="algorithms" scheme="http://infinitecaus.es/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use $ocLazyLoad to achieve your own angular-deferred-bootstrap]]></title>
    <link href="http://infinitecaus.es/2014/10/13/ng-deferred-bootstrap-like-with-oclazyload/"/>
    <id>http://infinitecaus.es/2014/10/13/ng-deferred-bootstrap-like-with-oclazyload/</id>
    <published>2014-10-14T00:48:00.000Z</published>
    <updated>2015-09-04T22:35:25.567Z</updated>
    <content type="html"><![CDATA[<p>A few days ago, it dawned on me that the full futureStates implemention as shown in my previous blog <a href="/2014/08/26/oclazyload-future-states/" title="post">post</a> was not needed by my app. I was okay with eagerly loading the JavaScript, however <a id="more"></a> I wanted to acheive two things, namely,</p>
<ol>
<li>Restrict what JavaScript I wanted to load in the entire lifecyle of an app. To me, it was pretty deterministic what I wanted to load or not depending on a remote JSON resource.</li>
<li>I wanted some abilitites of the package <a href="https://github.com/philippd/angular-deferred-bootstrap" target="_blank" rel="external">angular-deferred-bootstrap</a> but in a way that I didn’t have replication of services and DI-injected resources that they fetched. I wanted these because <code>ui-router</code> would otherwise force me to<br>callout certain resolve-names needlessly. So for instance, if I have a <code>ListingService</code> that on app start, loads<br>a <code>listings.json</code> using a function <code>ListingService.getAll</code> and subsequently, I could make other calls to <code>LIstingService</code><br>such as <code>query</code> or <code>get</code>. So I did the <code>getAll</code> in the root state, and then proceeded to use the <code>ListingService</code> like so:<script src="//gist.github.com/charandas/c00c63a47a8f921773d0.js"></script>
If you notice, I would now be forced to couple the <code>allListings</code> resource with my use of <code>ListingService</code> to be able to guarantee that all listings have been fetched. The reasoning here lies in the fact that <code>ui-router</code> performs resolver<br>resolutions asynchronously. There is no concept of first doing it for the root states, and then the child states.</li>
</ol>
<h2 id="How_not_to_couple_the_services_to_their_resource_promise">How not to couple the services to their resource promise</h2><p>Lets get into our decoupled implemenation. Looks very similar to the previous post with <code>futureStateProvider.futureState</code> calls stripped out. The <code>futureStateProvider.addResolve</code> is all what we need to delay <code>ui-router</code> routing.<br>Also, the <code>ListingService</code> would now need to be a provider since its being used with <code>futureStateProvider</code> in the app’s<br>booting process. With it being a provider, you cannot have <code>$ngResource</code> in its code, however <code>$http</code> can serve you as well<br>hopefully.</p>
<script src="//gist.github.com/charandas/35b51979d7e1291ef34b.js"></script>
<h3 id="Why_name_our_example_module_raiiServicesExample">Why name our example module raiiServicesExample</h3><p>RAII stands for Resouce Allocation is Initialization. Thanks to my first boss for mentoring in those early years, these acronyms mean a ton and come handy. This is another description for what we have now in <code>ListingService</code> when the app has finished loading.</p>
]]></content>
    <summary type="html">
    <![CDATA[futureStates.addResolve with $ocLazyLoad for eager loading]]>
    
    </summary>
    
      <category term="RAII" scheme="http://infinitecaus.es/tags/RAII/"/>
    
      <category term="angular-deferred-bootstrap" scheme="http://infinitecaus.es/tags/angular-deferred-bootstrap/"/>
    
      <category term="ng-deferred-bootstrap" scheme="http://infinitecaus.es/tags/ng-deferred-bootstrap/"/>
    
      <category term="non-future states" scheme="http://infinitecaus.es/tags/non-future-states/"/>
    
      <category term="ocLazyload" scheme="http://infinitecaus.es/tags/ocLazyload/"/>
    
      <category term="requirejs" scheme="http://infinitecaus.es/tags/requirejs/"/>
    
      <category term="ui-router-extras" scheme="http://infinitecaus.es/tags/ui-router-extras/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lazy Loading ui-router states with ocLazyLoad and ui-router-extras futureStates]]></title>
    <link href="http://infinitecaus.es/2014/08/26/oclazyload-future-states/"/>
    <id>http://infinitecaus.es/2014/08/26/oclazyload-future-states/</id>
    <published>2014-08-26T11:48:00.000Z</published>
    <updated>2015-09-04T22:34:29.729Z</updated>
    <content type="html"><![CDATA[<p>Recently, I was able to implement lazy loading of ui-router in my single page app. I had to <a id="more"></a> extend myself a little bit because<br>the base ui-router package doesn’t come with all the supports for this. It provides a <code>stateNotFound</code> event<br>that can be tapped into by your code to register the new states. This is where <code>futureStates</code> API by <a href="https://github.com/christopherthielen/ui-router-extras" target="_blank" rel="external">ui-router-extras</a> comes in. The latter<br>allows you to use any lazy loading Angular mechanism for loading a missing state. </p>
<p>So to reiterate, the <code>futureStates</code> implementation is all about describing the state that is to be lazily loaded. The way to lazy load is left to you to define. We will use <a href="https://github.com/ocombe/ocLazyLoad" target="_blank" rel="external">ocLazyLoad</a> for our purposes.</p>
<p>I have a GitHub repo showing a test app demonstrating this <a href="https://github.com/charandas/ui-router-lazy-example" target="_blank" rel="external">here</a>.</p>
<p>The App runs <a href="http://infinitecaus.es/ui-router-lazy-example/app">here</a>. The pertinent code is in <a href="https://github.com/charandas/ui-router-lazy-example/blob/master/app/js/app.js" target="_blank" rel="external">app.js</a>, shown in gist here:<br><script src="//gist.github.com/charandas/831560ade572ad9739cd.js"></script></p>
<h3 id="What_I_learned_through_this">What I learned through this</h3><ol>
<li><code>requirejs</code> modules that span multiple files can be used for lazy loading a ui-router state. However, as of yet, such<br>support is not available in <a href="https://github.com/marcoslin/angularAMD" target="_blank" rel="external">angularAMD</a> package. Use ocLazyLoad if your app is set up<br>that way, like in our example.</li>
<li><code>reconfig: true</code> is needed when lazily loaded states are related in any way in hierarchy. If you find this to be inaccurate, let me know<br>but that’s what I found.</li>
<li>One particular advantage of <code>$futureStateProvider.addResolve</code> is if you return a full thennable promise chain from the function<br>passed as its argument, ui-router-extras won’t reject any transitions until that promise is resolved. Thus, you could read some app<br>settings from a service, and on the basis of them, register specific states.</li>
</ol>
<p>That’s it. I should mention that none of this would have been possible if not for the exciting packages by @ChrisThielen<br>(<a href="https://github.com/christopherthielen/ui-router-extras" target="_blank" rel="external">ui-router-extras</a>) and @OCombe (<a href="https://github.com/ocombe/ocLazyLoad" target="_blank" rel="external">ocLazyLoad</a>). Check them out on GitHub and Twitter. Hope you enjoy using these techniques in your app.</p>
]]></content>
    <summary type="html">
    <![CDATA[Fasten your app by reducing JS payload]]>
    
    </summary>
    
      <category term="future states" scheme="http://infinitecaus.es/tags/future-states/"/>
    
      <category term="ocLazyload" scheme="http://infinitecaus.es/tags/ocLazyload/"/>
    
      <category term="requirejs" scheme="http://infinitecaus.es/tags/requirejs/"/>
    
      <category term="ui-router-extras" scheme="http://infinitecaus.es/tags/ui-router-extras/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Improved boilerplate when using Madmimi's angular-foundation $modal]]></title>
    <link href="http://infinitecaus.es/2014/07/04/improved-angular-foundation-modal-with-timeout/"/>
    <id>http://infinitecaus.es/2014/07/04/improved-angular-foundation-modal-with-timeout/</id>
    <published>2014-07-04T07:15:00.000Z</published>
    <updated>2015-09-05T01:39:43.265Z</updated>
    <content type="html"><![CDATA[<p>In my earlier <a href="/2014/06/07/angular-foundation-modal-with-timeout/" title="post">post</a>, I presented the problem of not being able to intercept the closing/dismissing of a modal from the UI. While searching for an answer <a id="more"></a> to that problem I ended up improving and simplifying the ModalService wrapper.</p>
<h3 id="Salient_Features_of_this_Update">Salient Features of this Update</h3><ol>
<li><code>closed</code> boolean: the wrapper around <code>$modal</code>, namely <code>ModalService</code>, now relies on a boolean for gating the inner instances close and dismiss methods. This goes a long way in simplifying our timeout code. We no longer cancel the timeout in the event of a manual close or instead. The noop like behavior of close and dismiss wrappers doesn’t<br>hurt at all.</li>
<li><code>unregister</code> and pooling: <code>unregister</code> is a private method that keeps the modal <code>pool</code> (a newly introduced private data structure for book-keeping) maintained in event of user-enforced close<br>or dismiss. You will notice that the <code>ModalInstanceCtrl</code> has the extra <code>unregister</code> calls. This is the answer to my question of intercepting dismissing/closing from the UI. Once a modal is unregistered the boolean that we introduced protects from using the inner instance again.</li>
<li><code>cleanup</code> API: Also, we introduced a way for your application to close a bunch of modals to be closed automatically in any given scenario.</li>
</ol>
<script src="//gist.github.com/charandas/285194555dc7f1c028d7.js"></script>
<script src="//gist.github.com/charandas/5d51337339fb3006c205.js"></script>
<p>Also, please note that I define two different gists here for readability. You can have them in the same file, so as to use the private <code>unregister</code> function in <code>ModalInstanceCtrl</code>.</p>
<h3 id="In_Closing">In Closing</h3><p>It was a process getting to know <code>angular-foundation</code> <code>$modal</code> service. For instance, the very fact that $modalInstance injected into the <code>ModalInstanceCtrl</code><br>was the very instance that <code>$modal.open</code> returns took some time to sink in. What are you doing with <code>angular-foundation</code>: get in touch as we could likely benefit from each-other’s<br>know-how.</p>
]]></content>
    <summary type="html">
    <![CDATA[Wrap angular-foundation $modal so as to add goodies]]>
    
    </summary>
    
      <category term="angular" scheme="http://infinitecaus.es/tags/angular/"/>
    
      <category term="angular-foundation" scheme="http://infinitecaus.es/tags/angular-foundation/"/>
    
      <category term="boilerplate" scheme="http://infinitecaus.es/tags/boilerplate/"/>
    
      <category term="foundation" scheme="http://infinitecaus.es/tags/foundation/"/>
    
      <category term="modal" scheme="http://infinitecaus.es/tags/modal/"/>
    
      <category term="timeout" scheme="http://infinitecaus.es/tags/timeout/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Patch angular-foundation to expose a form controller]]></title>
    <link href="http://infinitecaus.es/2014/06/21/form-controller-modal/"/>
    <id>http://infinitecaus.es/2014/06/21/form-controller-modal/</id>
    <published>2014-06-21T22:51:00.000Z</published>
    <updated>2015-09-04T22:31:46.488Z</updated>
    <content type="html"><![CDATA[<p><a href="http://madmimi.github.io/angular-foundation/" target="_blank" rel="external">Angular-foundation</a> from Madmimi comes with a modal service that works exceptionally well<br>for pushing modals onto your app views. However, one thing that I found to be lacking is <a id="more"></a> the ability to access a<br><a href="https://docs.angularjs.org/api/ng/type/form.FormController" target="_blank" rel="external">FormController</a> from the modal DOM. I ended up patching my copy<br>of angular-foundation and thought the quick fix might be useful for others.</p>
<h3 id="Originally_mentioned_here">Originally mentioned here</h3><p>This stack overflow <a href="http://stackoverflow.com/questions/15935224/angularjs-access-formcontroller-of-a-form-placed-inside-transcluded-directive-f" target="_blank" rel="external">post</a> came handy. Highy recommended reading.</p>
<h3 id="Changeset">Changeset</h3><p>Assuming you are working with their templates dist JS, namely <code>mm-foundation-tpls.js</code>,</p>
<ol>
<li>Add <code>formCtrl: &#39;=&#39;</code> to <code>modalWindow</code> directive</li>
<li>Set it to the desired form controller in the <code>link</code> function</li>
<li>Expose it on the outside scope by specifying in <code>attrs</code></li>
</ol>
<p>Here is the gist:<br><script src="//gist.github.com/charandas/02d177e71c8de35e4db1.js"></script></p>
<h3 id="How_to_Use">How to Use</h3><p>Now to access it in <code>ModalInstanceCtrl</code>, access it via <code>$scope.$parent.formCtrl</code>. Although a little hacky, it does the job.</p>
<p>The readers are encouraged to covert this to a PR, if they so wish. One possible way might be through exposing a property on the instance<br>returned by <code>$modal.open</code>. Until then, use this patch on your own copy of <code>mm-foundation.js</code>.</p>
]]></content>
    <summary type="html">
    <![CDATA[Add the ability to $setValidity and more on a form inside a modal]]>
    
    </summary>
    
      <category term="angular" scheme="http://infinitecaus.es/tags/angular/"/>
    
      <category term="angular-foundation" scheme="http://infinitecaus.es/tags/angular-foundation/"/>
    
      <category term="forms" scheme="http://infinitecaus.es/tags/forms/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unit-test your ui-router configuration]]></title>
    <link href="http://infinitecaus.es/2014/06/11/testing-your-ui-router-configuration/"/>
    <id>http://infinitecaus.es/2014/06/11/testing-your-ui-router-configuration/</id>
    <published>2014-06-11T21:26:00.000Z</published>
    <updated>2015-09-04T22:33:16.964Z</updated>
    <content type="html"><![CDATA[<p><code>ui-router</code> comes with a lot of goodies through it’s rich states configuration. If you are like me and are tapping into all <a id="more"></a> of what <code>$stateProvider.state</code> method provides through its parameters, all your data is injected through resolvers and state’s data object, while all the enter/exit state logic comes in through the handlers (<code>onEnter</code> and <code>onExit</code>). </p>
<p>As you get initiated into ui-router, you may begin to notice that your code is slowly migrating from controllers to the state configuration. Controller thus becomes, more and more, a decorator of the view. This is all good as long as unit-test coverage doesn’t suffer. To ensure your states are well tested, take heart and start writing unit-tests to measure whether your states are happy!</p>
<h3 id="Testing_the_states">Testing the states</h3><p>My initial motivation came from this stack overflow <a href="http://stackoverflow.com/questions/20433485/angular-ui-router-unit-testing-states-to-urls" target="_blank" rel="external">post</a>, so feel free to give it a read.<br>I will try to cover what worked for me.</p>
<blockquote>
<p><strong>Pro-tip - Break it into modules:</strong><br>A gargantuan state configuration is not only a curse to the eyes but is difficult to test as well. Let’s start by breaking the route configuration into smaller modules. Doing ui-router state registration<br>across modules is extremely friendly: it queues any child states until parents are discovered. Hence, the ordering of modules while registering doesn’t matter.</p>
</blockquote>
<p>My code throughout would be <code>requirejs</code>, feel free to cater to your own module loader, or the lack thereof. We will have three modules, one for root controller <code>app</code> state, and two more for <code>a</code> and<br><code>b</code> module states. We would mostly leave out <code>b</code> for posterity.</p>
<script src="//gist.github.com/charandas/16f2a5552c2b419002ae.js"></script>
<p>For testing the <code>app</code> state, lets target the following:</p>
<ol>
<li>The resolvers do what they are asked to do.</li>
<li>The url of the state matches the requirement.</li>
<li>Other sanity checks such as checking whether <code>abstract</code> is <code>true</code>.</li>
</ol>
<p>Which kinda boils down to:</p>
<script src="//gist.github.com/charandas/eb96cd89f49a8739b644.js"></script>
<h4 id="Reality_check">Reality check</h4><ol>
<li>We checked that <code>SettingsService</code> is being invoked as we intend.</li>
<li>We matched the url without visiting the state since it is an abstract state.</li>
<li>We did the sanity checks as mentioned above.</li>
</ol>
<h4 id="Module_A_-_Lets_nail_this_down">Module A - Lets nail this down</h4><p>For testing <code>A</code> module, lets mock out a parent <code>app</code> state so we can isolate our testing to A.</p>
<script src="//gist.github.com/charandas/72db4ec5521f0f3a7cea.js"></script>
<script src="//gist.github.com/charandas/ec43d043654d0f014370.js"></script>
<p>and its tests:</p>
<script src="//gist.github.com/charandas/b971857be3cb3446f798.js"></script>
<h3 id="Summarizing">Summarizing</h3><p>I covered a good set of assertions for your states. What are you doing in addition to this, or different from this? Hit me up with your interesting thoughts.</p>
]]></content>
    <summary type="html">
    <![CDATA[Unit-test your ui-router configuration]]>
    
    </summary>
    
      <category term="angular" scheme="http://infinitecaus.es/tags/angular/"/>
    
      <category term="coverage" scheme="http://infinitecaus.es/tags/coverage/"/>
    
      <category term="ui-router" scheme="http://infinitecaus.es/tags/ui-router/"/>
    
      <category term="unit testing" scheme="http://infinitecaus.es/tags/unit-testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reducing boilerplate when using Madmimi's angular-foundation $modal]]></title>
    <link href="http://infinitecaus.es/2014/06/07/angular-foundation-modal-with-timeout/"/>
    <id>http://infinitecaus.es/2014/06/07/angular-foundation-modal-with-timeout/</id>
    <published>2014-06-07T16:52:00.000Z</published>
    <updated>2015-09-05T01:40:18.609Z</updated>
    <content type="html"><![CDATA[<p><a href="http://madmimi.github.io/angular-foundation/" target="_blank" rel="external">Angular-foundation</a> from Madmimi comes with a modal service that can be pretty useful when pushing modals onto the views of your angular app. The API is pretty flexible as provided <a href="http://madmimi.github.io/angular-foundation/#/modal" target="_blank" rel="external">here</a>. <a id="more"></a></p>
<p>As mentioned in the example in the JavaScript, you can accomplish a range of modals pretty easily. However, for simpler modals, this can get really tedious if all your ModalInstanceCtrl is going to do is bringing the modal up and dismissing/closing it. Instead, here is my take on the modal instance controller.<br><script src="//gist.github.com/charandas/140341acbc49a8a3f97b.js"></script></p>
<p>Also, a wrapper around <code>$modal</code>, namely <code>ModalService</code> could be written to automatically plug this controller in with some template defaults. Like so,<br><script src="//gist.github.com/charandas/ed6bf36215888c4a8cba.js"></script></p>
<h3 id="What_did_we_accomplish">What did we accomplish</h3><ol>
<li><code>timeout</code>: As you can see the service written by us has a parameter called <code>timeout</code>. This ensures that we have ability to push self-poppable modals onto the view.<br>L65 ensures that the modal made has a scheduled timeout that can dismiss it. Not only that, by using the close function of our wrapper, we can cancel any scheduled timeouts in case of a user action such as “our app becoming active”.</li>
<li><code>instance</code>: The open function returns a wrapped object containing the instance returned by <code>$modal.open</code>. You should use this to specify behavior on modal close and dismiss.</li>
<li><code>resolve</code>: the resolve attribute in the open function injected some generic dependencies that your templates can go off of. <code>extraParams</code> here is just one simple way to push to the scope of <code>ModalInstanceCtrl</code> a generic object’s content. This can enable varied templates to be used with this service wrapper.</li>
<li><code>template</code>: the service also sets up the default template that you can override through the params of the open function.</li>
</ol>
<h3 id="In_action">In action</h3><script src="//gist.github.com/charandas/689e2c30ddddec25103d.js"></script>
<h3 id="With_extra_parmas">With extra parmas</h3><p>Some pseudo code:<br><script src="//gist.github.com/charandas/6825b1f2d81dadd9fc89.js"></script></p>
<h3 id="Dare_you_to_improve_it"><a name="improving"></a> Dare you to improve it</h3><p>That’s it. Do you have better suggestions for intercepting <code>close</code> and <code>dismiss</code> on the inner instance? I can currently intercept only when my wrapper’s <code>cancel</code> or <code>dismiss</code> are used? So essentially the case when a modal with timeout is user-poppable. How would you cancel the scheduled timeout in that case?</p>
]]></content>
    <summary type="html">
    <![CDATA[Wrap angular-foundation $modal to reduce boilerplate.]]>
    
    </summary>
    
      <category term="angular" scheme="http://infinitecaus.es/tags/angular/"/>
    
      <category term="angular-foundation" scheme="http://infinitecaus.es/tags/angular-foundation/"/>
    
      <category term="boilerplate" scheme="http://infinitecaus.es/tags/boilerplate/"/>
    
      <category term="foundation" scheme="http://infinitecaus.es/tags/foundation/"/>
    
      <category term="modal" scheme="http://infinitecaus.es/tags/modal/"/>
    
      <category term="timeout" scheme="http://infinitecaus.es/tags/timeout/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using a root controller with ui-router]]></title>
    <link href="http://infinitecaus.es/2014/05/11/ui-router-with-root-ctrl/"/>
    <id>http://infinitecaus.es/2014/05/11/ui-router-with-root-ctrl/</id>
    <published>2014-05-11T17:06:00.000Z</published>
    <updated>2015-09-05T01:40:50.322Z</updated>
    <content type="html"><![CDATA[<p>ui-router is a great tool for those of us in the Angular realm. It gives a more logical way to represent the state of an application than just plain old URLs. This post is not going to be a <a id="more"></a> hands-on tutorial post, but the intent is throw around some ideas about structuring the root controller of your angular app.</p>
<h3 id="Root_Controller_and_Saving_the_Root_URL">Root Controller and Saving the Root URL</h3><p>Root controller allows one to instantiate some global data and services, and maybe even setup a <code>$global</code> service to act as a shim.</p>
<p>Root controller can often be seen in the base <code>index.html</code> of a project. In this case, it is used by calling the <code>ng-controller</code> directive on a <code>&lt;head&gt;</code> or <code>&lt;body&gt;</code> tag.<br>Alternatively, it could be mapped to a URL (the base URL for instance: “/“), and loaded via an <code>ng-view</code> in <code>index.html</code>; I am personally not a fan of using up the root URL for this purpose.</p>
<p>With ui-router’s <code>abstract</code> state feature, one could save the URL as well as save hardcoding a controller definition in HTML. I think this is fruitful, as the <code>routes.js</code> (or whatever you call it)<br>ends up becoming a decisive place to check controller mappings. </p>
<blockquote>
<p>Basically, the <code>abstract</code> state buys us the ability for that url or state to be unreachable.<br>This means that one can only<br>instantiate that state while visiting one of its children states - Magikal!</p>
<p>– <cite>Every seasoned ui-router user</cite></p>
</blockquote>
<p>The only thing to keep in mind is to use a <code>template</code>/<code>templateUrl</code> for abstract states that contains a <code>&lt;ui-view /&gt;</code>. This way, you ensure there is an unbroken line of nested <code>&lt;ui-view&gt;</code> hierarchy.</p>
<p>My <code>routes.js</code> looks similar to:<br><script src="//gist.github.com/charandas/660802f445a9edb06fe3.js"></script></p>
<p>Then, one could also follow the same pattern for the root controller of the print module of the app; have the abstract state and instantiate the root print controller on that. </p>
<blockquote>
<p>Also, as noted in the comments, there is nothing stopping us from loading a subset of states in a base template, say<br><code>index.html</code>, and the leftovers in another called <code>print.html</code>. In fact, the only thing<br>ui-router is concerned with is that each of these templates have a <code>&lt;ui-view /&gt;</code>. This way, you get different base<br>layouts and styling for different modules of your application.</p>
<p>– <cite>Every seasoned ui-router user</cite></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[Instantiating a root controller without wasting a url, and also not coding it in your HTML.]]>
    
    </summary>
    
      <category term="angular" scheme="http://infinitecaus.es/tags/angular/"/>
    
      <category term="ng-controller" scheme="http://infinitecaus.es/tags/ng-controller/"/>
    
      <category term="root controller" scheme="http://infinitecaus.es/tags/root-controller/"/>
    
      <category term="ui-router" scheme="http://infinitecaus.es/tags/ui-router/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Semantic Versioning]]></title>
    <link href="http://infinitecaus.es/2014/03/03/semver-2/"/>
    <id>http://infinitecaus.es/2014/03/03/semver-2/</id>
    <published>2014-03-04T01:42:00.000Z</published>
    <updated>2015-09-04T22:34:39.937Z</updated>
    <content type="html"><![CDATA[<p>Semantic versioning entails tagging your software at every stage of the development process. The term and scheme was proposed by <a id="more"></a> <a href="http://en.wikipedia.org/wiki/Tom_Preston-Werner" target="_blank" rel="external">Tom<br>Preston-Werner</a> as a way to help developers manage what he called “dependency hell”. Also known as <code>semver</code>, it has now reached the version<br>2.0.0 and I certainly feel that having it standardized as such would provide direction for the development community at large.</p>
<h3 id="Why_am_I_writing_this_post">Why am I writing this post</h3><p>Well, perhaps because Erik Toth recently urged the community to take semver seriously on Nodeday.<br><a href="http://totherik.github.io/NodeDay2014/#0" target="_blank" rel="external">Here</a> are his full slides. In addition, I am resurrecting my blog today so<br>thought of it as a good topic to boot with.</p>
<h3 id="Introduction">Introduction</h3><p>On a first look, it is really easy to absorb the tenets of <code>semver</code>. Basically, a version consists of 3 parts: <code>MAJOR</code>, <code>MINOR</code> and <code>PATCH</code>.<br>Semantic versioning dictates that all of these parts can incremented at specific points in the development lifecycle. The <a href="http://semver.org" target="_blank" rel="external">semver.org</a> site tells us to increment:</p>
<ol>
<li>MAJOR version when you make incompatible API changes,</li>
<li>MINOR version when you add functionality in a backwards-compatible manner, and</li>
<li>PATCH version when you make backwards-compatible bug fixes.</li>
</ol>
<h3 id="Specifying_Versions">Specifying Versions</h3><p>All examples of version specification below assume two packages A and B, with A depending on B’s 1.9.x version.<br>The psuedo code for semver spec is provided, which more or less, resembles most package manager<br>configuration formats.</p>
<h4 id="The_Regular_Operators">The Regular Operators</h4><p>Most package managers support the logical operators such as <code>&gt;</code>, <code>&lt;</code> and <code>=</code> for specifying dependencies. For <code>semver</code> in <code>npmjs</code>,<br>take a look at the <a href="https://www.npmjs.org/doc/misc/semver.html" target="_blank" rel="external">doc</a>. These operators together can be used to very succintly tell<br>which versions of a certain package your package depends on.</p>
<h4 id="Pessimistic_Version_Constraint">Pessimistic Version Constraint</h4><p>It’s always recommended to keep away from the optmistic <code>&gt;= 1.8.3</code> in favor of the pessmistic <code>&gt;= 1.8.3, &lt; 1.9.0</code>, also<br>referred to as a compound requirement - meaning it is composed of more than one condition.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  dependencies: &#123;</span><br><span class="line">    <span class="string">'B'</span>: <span class="string">'&gt;= 1.8.3 &lt; 1.9.0'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Some package managers provide a tilde shorthand for this. In <a href="https://www.npmjs.org/doc/misc/semver.html" target="_blank" rel="external">npmjs</a>,<br>one would use <code>~X.Y</code> to mean the <em>reasonably close</em> or pessimistic definition.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  dependencies: &#123;</span><br><span class="line">    <span class="string">'B'</span>: <span class="string">'~1.8.3'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In <a href="http://guides.rubygems.org/patterns/#pessimistic_version_constraint" target="_blank" rel="external">rubygems</a>, this is expressed by <code>~&gt; X.Y</code> or the <em>twiddle-wakka</em>.<br>If you want prerelease versions, rubygems makes you fallback to the explicit compound requirement.</p>
<h3 id="How_does_this_pan_out_in_development?">How does this pan out in development?</h3><p>We will use a scenario entailing a dependency relationship between two packages A and B.</p>
<ol>
<li>A is written with a specified dependency on B’s <code>latest</code>. However, it implicitly depended upon B <code>1.9.x</code>.</li>
<li>B is being developed further and ends up having API breaking changes and being versioned at <code>2.0.0</code>.</li>
<li>A’s developer pulls in the latest B code and runs into some issues. She uses her dependency manager (<code>npm</code>, <code>bower</code>, <code>rubygems</code>, <code>pip</code>, what have you) to determine that B has incremented the <code>MAJOR</code> version. She makes the dependency more explicitly <code>1.9.x</code> and voila, the issue is resolved.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[Why semver is important.]]>
    
    </summary>
    
      <category term="bower" scheme="http://infinitecaus.es/tags/bower/"/>
    
      <category term="dependencies" scheme="http://infinitecaus.es/tags/dependencies/"/>
    
      <category term="npmjs" scheme="http://infinitecaus.es/tags/npmjs/"/>
    
      <category term="pip" scheme="http://infinitecaus.es/tags/pip/"/>
    
      <category term="rubygems" scheme="http://infinitecaus.es/tags/rubygems/"/>
    
      <category term="semver" scheme="http://infinitecaus.es/tags/semver/"/>
    
  </entry>
  
</feed>
